name: 'Terragrunt_CD'
# change
on:
  push:
    branches:
    - main
  pull_request:
    branches:
    - main
  
# permissions:
#   id-token: write
#   contents: read

jobs:   
  Terragrunt:     
    name: 'Terragrunt'
    runs-on: ubuntu-latest # self-hosted
    env:
      ARM_CLIENT_ID: ${{ secrets.AZURE_AD_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.AZURE_AD_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.AZURE_AD_TENANT_ID }}

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash
        working-directory: "./non-prod"
        
    steps:
# Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v2
      
  # Log into Azure with OIDC integration
#     - name: 'Az CLI login'
#       uses: azure/login@v1
#       with:
#         client-id: ${{ secrets.AZURE_AD_CLIENT_ID }}
#         tenant-id: ${{ secrets.AZURE_AD_TENANT_ID }}
#         subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        
#     - name: Azure Login
#       uses: Azure/login@v1.4.6
#       with:
#         # ClientId of the Azure Service principal created.
#         client-id: ${{ secrets.AZURE_AD_CLIENT_ID }}
#         # TenantId of the Azure Service principal created.
#         tenant-id: ${{ secrets.AZURE_AD_TENANT_ID }}
#         # Azure subscriptionId
#         subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
#         # Name of the environment. Supported values are azurecloud, azurestack, azureusgovernment, azurechinacloud, azuregermancloud. Default being azurecloud
#         environment: azurecloud
#         # Provide audience field for access-token. Default value is api://AzureADTokenExchange
#         audience: api://AzureADTokenExchange
      
    - name: Terragrunt installer
      uses: autero1/action-terragrunt@v1.2.0
      with:
        # Terragrunt version to install
        terragrunt_version: 0.40.0
        
    - name: Setup TFLint
      uses: terraform-linters/setup-tflint@v3.0.0
      with:
        tflint_version: latest
    # GitHub token - used when getting the latest version of tflint
        github_token: ${{ secrets.API_TOKEN }}

    # Initialize a new or existing Terragrunt working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terragrunt Init
      run: terragrunt init --terragrunt-non-interactive
      
    - name: Terragrunt Validate
      run: terragrunt validate
      
    - name: Tflint  init
      run: tflint --init
      
    - name: Run Tflint
      run: tflint -f compact

    # Generates an execution plan for Terragrunt
    - name: Terragrunt Plan
      run: terragrunt run-all plan # --terragrunt-non-interactive

      # On push to main, build or change infrastructure according to Terragrunt configuration files.
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terragrunt Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
   # - name: Terragrunt Apply
   #   if: github.ref == 'refs/heads/main' && github.event_name == 'push'
   #   run: terragrunt run-all apply --terragrunt-non-interactive
      
   # - name: Terragrunt Output
   #   run: terragrunt output-all
      
   # - name: Terragrunt destroy
   #   run: terragrunt run-all destroy --terragrunt-non-interactive
